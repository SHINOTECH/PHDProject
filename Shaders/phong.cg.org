/**************************************************************************
iceCrackDepth
	Shader which renders only specular highlighting.


	Copyright 2007, Anders Nivfors.
	
	Permission is granted to anyone to use this software for any purpose,
	including commercial applications, and to alter it and redistribute it
	freely, as long as the above copyright notice and this disclaimer are
	retained. Furthermore, if you use this software in a product, an
	acknowledgment in the product documentation would be appreciated but is
	not required.
***************************************************************************/
//---vertex shader---
void mainV(	in float4 Position            : POSITION,
			in float4 Normal              : NORMAL,
			uniform float3 camPos,						//world space camera position
            uniform float3 lightPos,					//world light camera position
            out float4 HPosition          : POSITION,
            out float3 Normal0            : TEXCOORD0,
            out float3 PositionViewSpace  : TEXCOORD1,
			out float3 LightVec			  : TEXCOORD2,
			out float3 EyeVec			  : TEXCOORD3 )
{
   // transform vertex position into homogenous clip-space
   HPosition = mul(glstate.matrix.mvp, Position);

   // transform normal position
   Normal0 = mul(glstate.matrix.invtrans.modelview[0], Normal).xyz;

   // Transform psoition
   PositionViewSpace = mul(glstate.matrix.modelview[0], Position).xyz;

   LightVec = lightPos;
   EyeVec = camPos;
}


void mainF(	in float3 Normal0             : TEXCOORD0,
			in float3 PositionViewSpace   : TEXCOORD1,
			float3 LightVec				  : TEXCOORD2,
			float3 EyeVec				  : TEXCOORD3 ,              
			out float4 color              : COLOR0)
{
   // calculate half angle vector
   float3 halfVec = normalize(LightVec - PositionViewSpace);

   // calculate normal vector     
   float3 vNormal = normalize(Normal0);

   // calculate diffuse component
   float diffuse = dot(vNormal, LightVec);

   // calculate specular component
   float specular = dot(vNormal, halfVec);

   // blue diffuse material
   float3 diffuseMaterial = float3(0.04, 0.04, 0.04);

   // white specular material
   float3 specularMaterial = float3(0.4, 0.4, 0.4);

   // Use the lit function to compute lighting vector from diffuse and 
   // specular values
   float4 lighting = lit(diffuse, specular, 80);

   // combine diffuse and specular contributions and output final vertex color
   color.rgb = 0.05 + lighting.y * diffuseMaterial + lighting.z * specularMaterial;
   color.a = 1.0;
}